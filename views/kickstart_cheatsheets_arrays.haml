-# coding: UTF-8

%div.row
  %div.leaderboard
    %h1 Ruby Array Kullanım Klavuzu 
    %h4 
      Orjinali : 
      %a(href="https://github.com/JoshCheek/ruby-kickstart/blob/master/cheatsheets/arrays.rb" target="_blank") Ruby-Kickstart
    %h4 Çeviren : Ümit Kayacık

%br

%div.row
  %div.span12
    %h4.sag arrays.rb
    
    :coderay
      #!Ruby
      
      # =====  Tanımlama  =====
      [ 1 , 2 , 3 ]                       # => [1, 2, 3]
      Array.new(2)                        # => [nil, nil]
      Array.new(5) { |i| i * 5 }          # => [0, 5, 10, 15, 20]
      Array.new(2) { Array.new(2) }       # => [[nil, nil], [nil, nil]]
      ary = [ ]                           # => []
      ary = Array.new                     # => []
        # boşlukla ayrılmış kelimelerden array tanımlama
      %w(this that, and the other)        # => ["this", "that,", "and", "the", "other"]


      # =====  Erişmek ve değer değiştirmek  =====
      ary = %w(ruby python perl php javascript c)
      ary[0]                # => "ruby"
      ary[1]                # => "python"
      ary[2]                # => "perl"
      ary[3]                # => "php"
      ary[4] = 'ecmascript'
      ary                   # => ["ruby", "python", "perl", "php", "ecmascript", "c"]

        # negatif indexler sondan geriye sayılır
      ary[-1]               # => "c"
      ary[-2]               # => "ecmascript"
      ary[-3]               # => "php"

        # first ve last (maalesef  ary.first = 'abc'   yapılamaz, 
        # object model üzerinde çalıştıkça sebebi daha iyi anlaşılacaktır)
      ary.first             # => "ruby"
      ary.last              # => "c"


        # altarray'lar, bir index aralığında yada bir indexten sonra belli sayıda üyeyi verir
      ary                     # => ["ruby", "python", "perl", "php", "ecmascript", "c"]
      ary[0..2]             # => ["ruby", "python", "perl"]
      ary[-3..-1]           # => ["php", "ecmascript", "c"]
      ary[2,3]              # => ["perl", "php", "ecmascript"]

        # bir index aralığını başka bir array elemanları ile değiştirebilirsiniz (boyut uyuşması önemli değil)
      ary                   # => ["ruby", "python", "perl", "php", "ecmascript", "c"]
      ary[1..2] = [9,8,7,6,5,4,3,2,1]
      ary                   # => ["ruby", 9, 8, 7, 6, 5, 4, 3, 2, 1, "php", "ecmascript", "c"]


      ary = Array(0..10)    # => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      ary.insert(5,'five')
      ary                   # => [0, 1, 2, 3, 4, "five", 5, 6, 7, 8, 9, 10]


      # =====  Sıraya dizmek  =====
      before = [3,6,3,0,8,235,-3]
      after  = before.sort
      before       # => [3, 6, 3, 0, 8, 235, -3]
      after        # => [-3, 0, 3, 3, 6, 8, 235]

        # metod sonunda ünlem işareti demek "dikkatli ol" demektir, metodların çoğunluğu objeyi değiştirmeden yeni bir obje geriye döndürür
        # ama "tehlikeli" olanlar direk olarak bağlandıkları objeyi değiştirir
      before       # => [3, 6, 3, 0, 8, 235, -3]
      before.sort!
      before       # => [-3, 0, 3, 3, 6, 8, 235]

        # kendi kriterinize göre de sıraya sokabilirsiniz, kod bloğunuz -1, 0 veya +1 çıktısı vermeli
        # Bu Java'nın compareTo metoduyla aynıdır. Bizim bu iş için olan operatörümüzün adı uzay gemisi (spaceship) 
        # eğer bu örnek kafa karıştırdıysa, bana bildirin (yada çok kolay geldiyse kendinizle gurur duyun)
      after = before.sort do |a,b|
        b <=> a   # büyük eleman önce gelcek şekilde sırala
      end
      before # => [-3, 0, 3, 3, 6, 8, 235]
      after  # => [235, 8, 6, 3, 3, 0, -3]

        # adı ve yaşı olan bir nesne
      class Person
        attr_accessor 'name', 'age'
        def initialize(name, age)
          @name, @age = name, age
        end
        def inspect
          "<\#{name}(\#{age})>"
        end
      end 

        # bak şimdi bu kişileri sıraya dizeceğiz , blok ne dönerse ona göre sıralanır
      people = [
        Person.new( 'Ernie'    , 20 ),
        Person.new( 'Sara'     , 50 ),
        Person.new( 'Monique'  , 10 ),
        Person.new( 'Mohammed' , 60 ),
      ]
      people.sort_by { |person| person.age } # => [<Monique(10)>, <Ernie(20)>, <Sara(50)>, <Mohammed(60)>]



      # =====  Elemanları eklemek / silmek / değiştirmek / bulmak  =====

        # append / push / pop  (yine mi yığın işlemleri?)
      ary = [1,2,3]
      ary << 4
      ary             # => [1, 2, 3, 4]
      ary.push 5
      ary             # => [1, 2, 3, 4, 5]
      ary.pop         # => 5
      ary             # => [1, 2, 3, 4]

        # eğer baş tarafa push / pop yapmak isterseniz bunu unshift ve shift ile yapabilirsiniz
        # hangisi hangisiydi hatırlamak için shift ile assembler komutu shl'yi eşleştirebilirsiniz
      ary = [1,2,3]
      ary.unshift 0
      ary             # => [0, 1, 2, 3]
      ary.shift       # => 0
      ary             # => [1, 2, 3]

        # eleman silmek
      ary = Array(1..10)             # => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      ary.delete 5
      ary                            # => [1, 2, 3, 4, 6, 7, 8, 9, 10]

      ary = Array(1..10)             # => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
      ary.reject { |i| i % 2 == 0 }  # => [1, 3, 5, 7, 9]
      ary.select { |i| i % 2 == 0 }  # => [2, 4, 6, 8, 10]

        # bir nesne araştırmak
      ary = Array(3..10)    # => [3, 4, 5, 6, 7, 8, 9, 10]
      ary.include?(5)       # => true
      ary.index(5)          # => 2
      ary.include?(11)      # => false
      ary.index(11)         # => nil


      # =====  Döngüler  =====

        # tüm elemanlar üzerinde döngü
      sum , ary = 0 , [1,2,3]
      ary.each { |num| sum += num }
      sum       # => 6
        
        # bütün indexler üzerinde döngü yap ve sonucu yeni bir array'e yaz
      results = Array.new
      %w(a b c).each_index { |i| results.push i }
      results   # => [0, 1, 2]

        # eğer hem index hem elemanlar üzerinden döngü isterseniz
      results = Array.new
      %w(a b c).each_with_index do |character,index|
        results.push "index \#{index} holds element \#{character}"
      end
      results   # => ["index 0 holds element a", "index 1 holds element b", "index 2 holds element c"]

        # orjinal array elemanlarının herbirinden elde edilen elemanlarla yeni bir array üretmek
        # bloğun döndüğü son şey (son satırındaki işlemin sonu) bulunulan indexe yazılacaktır
      ary = [0,1,1,1,1,3]
      ary.map { |num| num * 2 }                       # => [0, 2, 2, 2, 2, 6]
      ary.map { |num| %w(zero one two three)[num] }   # => ["zero", "one", "one", "one", "one", "three"]

        # çoklu eleman üzerinden döngü
      result = []
      Array(1..10).each_slice(2) { |a, b| result << [a, b] }
      result # => [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]

      result = []
      Array(1..10).each_cons(2) { |a, b| result << [a, b] }
      result # => [[1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10]]

      # ===== Yararlı ve kullanışlı dımbırtılar  =====
        # eşitlik
      [1,2,3] == [1,2,3]              # => true
      [1,2,3] == [3,2,1]              # => false

        # tekrarlama
      [1,22] * 3                      # => [1, 22, 1, 22, 1, 22]

        # ekleme
      [1,2] + %w(3 4)                 # => [1, 2, "3", "4"]

        # fark alma
      [1,2,3,4] - [3,5]               # => [1, 2, 4]

        # max ve min
      [3, 4, 13, 2, -3, 7].max        # => 13
      [3, 4, 13, 2, -3, 7].min        # => -3

        # kesişme
      [1,3,4] & [0,3,4,5]             # => [3, 4]

        # bileşim (sıralama garanti edilemez)
      [1,3,4] | [0,3,4,5]             # => [1, 3, 4, 0, 5]

        # elemanları stringe çevir ve birbirine ekle
      [1,2,3].join(' and ')           # => "1 and 2 and 3"

        # length / size  (hangisi doğruydu hatırlamak zor mu? Ruby'de, ikisi de doğru ^_^)
      [1,2,3].length                  # => 3
      [1,2,3].size                    # => 3

        # ters çevir
      [1,2,3].reverse                 # => [3, 2, 1]

        # harmanlamak
      a = [1,2,3]
      b = %w(one two three)
      [ a , b ].transpose             # => [[1, "one"], [2, "two"], [3, "three"]]
      a.zip b                         # => [[1, "one"], [2, "two"], [3, "three"]]
        
        # değişkenlere aktarmak
      a = [1,2,3]
      num1 , num2 , num3 = a
      num1                            # => 1
      num2                            # => 2
      num3                            # => 3

        # argüman olarak göndermek için köşeli parantezlerin "çıkarılması"
      def sum( x , y , z )
        x + y + z
      end
      a = [1,2,3]
      sum(*a)                         # => 6
    


%hr

#disqus_thread
%script(type="text/javascript" async="true" src="http://ruby-tr.disqus.com/embed.js")
  
<noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
